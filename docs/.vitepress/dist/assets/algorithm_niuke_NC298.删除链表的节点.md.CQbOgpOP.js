import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.CKqHMtmV.js";const l="/vitepressBlog/assets/01.D9NtzNfk.png",e="/vitepressBlog/assets/02.BkEiVuPr.png",p="/vitepressBlog/assets/03.D72QD6kG.png",t="/vitepressBlog/assets/04.C9uGgo5r.png",h="/vitepressBlog/assets/05.DqGcw5cR.png",k="/vitepressBlog/assets/06.C7Pp6c1v.png",D=JSON.parse('{"title":"NC298.删除链表的节点","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"algorithm/niuke/NC298.删除链表的节点.md","filePath":"algorithm/niuke/NC298.删除链表的节点.md"}'),r={name:"algorithm/niuke/NC298.删除链表的节点.md"},d=n('<h1 id="nc298-删除链表的节点" tabindex="-1">NC298.删除链表的节点 <a class="header-anchor" href="#nc298-删除链表的节点" aria-label="Permalink to &quot;NC298.删除链表的节点&quot;">​</a></h1><h2 id="题目描述" tabindex="-1"><a href="https://www.nowcoder.com/practice/f9f78ca89ad643c99701a7142bd59f5d?tpId=196&amp;rp=1&amp;ru=%2Fexam%2Foj&amp;qru=%2Fexam%2Foj&amp;sourceUrl=%2Fexam%2Foj&amp;difficulty=&amp;judgeStatus=&amp;tags=&amp;title=%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8&amp;gioEnter=menu" target="_blank" rel="noreferrer">题目描述</a> <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;[题目描述](https://www.nowcoder.com/practice/f9f78ca89ad643c99701a7142bd59f5d?tpId=196&amp;rp=1&amp;ru=%2Fexam%2Foj&amp;qru=%2Fexam%2Foj&amp;sourceUrl=%2Fexam%2Foj&amp;difficulty=&amp;judgeStatus=&amp;tags=&amp;title=%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8&amp;gioEnter=menu)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>标签：链表</p></div><h2 id="算法思路" tabindex="-1">算法思路 <a class="header-anchor" href="#算法思路" aria-label="Permalink to &quot;算法思路&quot;">​</a></h2><p>本题删除值为val的节点需要分为两步：定位节点、修改引用。</p><ul><li>1、定位节点：遍历链表，直到 <code>head.val === val</code> 时候跳出，就可以定位目标节点。</li><li>2、修改引用：设节点 <code>cur</code> 的前驱节点为 <code>pre</code> , 后继节点为 <code>cur.next</code>; 则执行 <code>pre.next = cur.next</code>, 就可以实现删除 <code>cur</code> 节点。</li></ul><p><img src="'+l+'" alt="原理演示"></p><p>算法流程：</p><ul><li>1、特例处理：当应删除头节点 <code>head</code> 时候，直接返回 <code>head.next</code> 即可。</li><li>2、初始化：<code>pre = head</code>, <code>cur = head.next</code></li><li>3、定位节点： 当 <code>cur</code> 为空或者 <code>cur</code> 节点等于 <code>val</code> 的时候跳出 <ul><li>a.保存当前节点的索引,即 <code>pre = cur</code></li><li>b.遍历下一个节点，即 <code>cur = cur.next</code></li></ul></li><li>4、删除节点：如果 <code>cur</code> 指向某个节点，则执行 <code>pre.next = cur.next</code>; 如果 <code>cur</code> 指向 <code>null</code>，代表链表中不包含值为<code>val</code>的节点。</li><li>5、返回值：返回链表头部节点 head 即可。</li></ul><p><img src="'+e+'" alt="原理演示"></p><p><img src="'+p+'" alt="原理演示"></p><p><img src="'+t+'" alt="原理演示"></p><p><img src="'+h+'" alt="原理演示"></p><p><img src="'+k+`" alt="原理演示"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * function ListNode(val) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *     this.val = val;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *     this.next = null;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deleteNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 如果需要删除的节点是头节点，直接返回head.next</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (head.val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head.next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 创建两个指针</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pre </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head.next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cur.val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pre </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cur;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cur.next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pre.next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cur.next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,15),c=[d];function E(o,g,y,u,m,A){return a(),i("div",null,c)}const _=s(r,[["render",E]]);export{D as __pageData,_ as default};
